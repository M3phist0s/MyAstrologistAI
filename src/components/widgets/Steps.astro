---
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import Timeline from '~/components/ui/Timeline.astro';
import Headline from '~/components/ui/Headline.astro';
import Image from '~/components/common/Image.astro';
import type { Steps as Props } from '~/types';
import { useState } from 'react';


const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  items = [],
  image = await Astro.slots.render('image'),
  isReversed = false,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---
<!-- /* Secction added */ -->
const StepItem = ({ title, description, icon }) => {
  const [isExpanded, setIsExpanded] = useState(false);

  const handleToggle = () => {
    setIsExpanded(!isExpanded);
  };

  return (
    <div className="step-item">
      <div className="step-header" onClick={handleToggle}>
        <i className={`icon ${icon}`}></i>
        <span dangerouslySetInnerHTML={{ __html: title }}></span>
      </div>
      {isExpanded && (
        <div className="step-description" dangerouslySetInnerHTML={{ __html: description }}></div>
      )}
    </div>
  );
};

const Steps = ({ title, items }) => {
  return (
    <div className="steps">
      <h2>{title}</h2>
      {items.map((item, index) => (
        <StepItem
          key={index}
          title={item.title}
          description={item.description}
          icon={item.icon}
        />
      ))}
    </div>
  );
};

export default Steps;
<!-- /* End Secction added */ -->


<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-5xl ${classes?.container ?? ''}`} bg={bg}>
  <div class:list={['flex flex-col gap-8 md:gap-12', { 'md:flex-row-reverse': isReversed }, { 'md:flex-row': image }]}>
    <div class:list={['md:py-4 md:self-center', { 'md:basis-1/2': image }, { 'w-full': !image }]}>
      <Headline
        title={title}
        subtitle={subtitle}
        tagline={tagline}
        classes={{
          container: 'text-left rtl:text-right',
          title: 'text-3xl lg:text-4xl',
          ...((classes?.headline as object) ?? {}),
        }}
      />
      <Timeline items={items} classes={classes?.items as Record<string, never>} />
    </div>
    {
      image && (
        <div class="relative md:basis-1/2">
          {typeof image === 'string' ? (
            <Fragment set:html={image} />
          ) : (
            <Image
              class="w-full h-auto rounded-md shadow-lg md:h-full bg-gray-400 dark:bg-slate-700"
              widths={[400, 768, 800, 1024]}
              sizes="(max-width: 768px) 100vw, (max-width: 1024px) 50vw, 432px"
              width={800}
              height={2000}
              layout="responsive"
              src={image?.src}
              alt={image?.alt || ''}
            />
          )}
        </div>
      )
    }
  </div>
</WidgetWrapper>
